
                            Abstract Method Example;
                            
                            
                            
                            
                            

abstract class mobile1{
	
	abstract void camera();
	abstract void display();
}

class Samsung extends mobile1{

@Override
void camera() {
System.out.println("16 mega pichel camera");	
}

@Override
void display() {
System.out.println("5.5 inch display");	
}
}
class nockiya extends mobile1{

	@Override
	void camera() {
		System.out.println("9 mega pichel camera");	

	}

	@Override
	void display() {
		System.out.println("5 inch display");	
		
	}
	void fingerpriend() {
		System.out.println("fast frenger prints");	
		
	}

	
}
public class Abstraction_class {

	public static void main(String[] args) {
		Samsung m=new Samsung();
		m.camera();
		m.display();
		System.out.println(".................................");
	nockiya n =new nockiya();
		n.camera();
		n.display();
		n.fingerpriend();
	
	}

}

                                         Abstract Method In Example;
                                         
                                         
                                         
                                         
                                         


class Showroom{      //class is great in showroom
	void display( car c) { // paramrter pass pnnanum
		c.autostart();
		c.autostop();
	}
}
abstract class car{   //so method is abstract   //parent class
	public abstract void autostart();   //method is abstract the class must be abstract
	public abstract void autostop();
}
class Audi extends car{   // extends  child class

	@Override
	public void autostart() {    //overriding the method
System.out.println("inside Audi_Auostart");		
	}

	@Override
	public void autostop() {
		System.out.println("inside Audi_Auostart");		

	}
	
}
class Bmw extends car{  ///  extent  child class 

	@Override
	public void autostart() {
		System.out.println("inside Bmw_Auostart");		

	}

	@Override
	public void autostop() {
		System.out.println("inside Bmw_Auostart");		

	}
	
}
public class Abstraction_Program {

	public static void main(String[] args) {
    Showroom s=new Showroom();  //object is great the method
  //  s.display(new Audi());  // Audi class ku object great panren with help of new key word
                                 // in pass the paramiter of car css
    
    s.display(new Bmw());  // ,,   ,,  ,,
	}

} 



                                   ArrayBasic  Example Program
                                   
                                   
                                   
                                   


import java. util.*;
public class ArrayBasic {          //binary search;

	public static  void main(String[] args) {
		ArrayBasic ab=new ArrayBasic();
		 int position=ab.dobinarySearch();
		 if(position>0) {
			 System.out.println("Key is present in"+position);
		 }
		 else {
			 
		 
			 System.out.println("Key is not present");
	}
	}

	private int dobinarySearch() {       //method calling
		int []ar= {10,20,34,45,67,89};
		int min=0,max=ar.length-1;    
		int key=38;                    //search element
		while(min<=max) {
			int mid=(min+max)/2;       //average = (min +max)/2 
			if(key==ar[mid]) {
				return mid;
			}
			else if(key<ar[mid]) {   //key<ar{mind}   // max=(min -1)
				max=mid-1;
			}
			else {
				min =mid+1;         //key>mid=mid+1;
			}
		}
		return-1;
	}
	}
//38=not pesent;

	


                                 BUPPLE Sort  Program
                                 
                                 
                                 
                                 
                                 import java.util.Scanner;
public class Bubble_Sort {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the limit");
		int num=sc.nextInt();
		int [] ar=new int[num];
	 for(int i=0;i<ar.length;i++) {
		 System.out.println("Enter the number["+i+"]");
		 ar[i]=sc.nextInt();
	 }
	 int j=1;
	 while(j<ar.length) {
		 int i=0;
while(i<ar.length-j) {
	

		 if(ar[i]>ar[i+1]) {  //if (ar[i]>a[i+1]){//50>40, output:50,40,30,20,10
			 int temp=ar[i];
			 ar[i]=ar[i+1];
			 ar[i+1]=temp;
		 }
		 i++;

		 }
	 
	 j++;
	 }
	System.out.println("After array");
for( int k=0;k<ar.length;k++) {
	
	System.out.println(ar[k]);

}
	}//output: 10,20,30,40,50
	
	}



                                     ENGABSULATION EXAMPLE PROGRAM
                                     
                                     
                                     
                                     
  class Car{
	private String colour;  ///prite method
	private float weight;

public float getweight() {  //geter and seter method
	return weight;
}
public void setweight( float w) {
 this.weight=w;
	
}
public String getcolour() {
	return colour;
}
public void setcolour(String c) {
	 this.colour=c;
		
	}


void move() {   //normal method
	System.out.println("car is move");
}
}
public class Encapsulation_Anather_program {

	public static void main(String[] args) {
Car c=new Car();                    //object is greating
c.setcolour("blue");    // set the coloue

System.out.println(c.getcolour()); //get the colour
c.setweight(45);

System.out.println(c.getweight());
c.move();   //normal method is calling
	}

}
 //output is colour and weight and  narmal method;
 
 
 
 
                                        ENCAPSULATION EXAMPLE PROGRAM 2;
                                        
                                        /*class Bank{
class Bank{
float balance=500;

*/
class Bank{
	 private float  balance =500;

	public float getBalance() {
		return balance;
	}

	public void setBalance(float balance) {
		this.balance = balance;
	}
}
public class Encapsulation_program {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
     Bank b1=new Bank();
  System.out.println(b1.getBalance());
/*
 * 	public static void main(String[] args) {

   Bank b1=new Bank();
    System.out.println(b1.balance);
 * Easc a yaruvennalum access panni pakkamudium so (private is securted)
 *   getter and setter method
 */
	}

}



                  INTERFACE EXAMPLE PROGRAM:

	interface camera{  //interface
		void click();
		void record();
	}
	interface player { //anather interface
		void play();
		void pause();
		void stop();
	}
	class SmartPhone  implements camera,player{ // interface using multiple inheritance

		@Override
		public void play() { //overriding
			System.out.println("music is play");
		}

		@Override
		public void pause() {
			System.out.println("music is pause");

		}

		@Override
		public void stop() {
			System.out.println("music is stop");

		}

		@Override
		public void click() {
			System.out.println("take photo");

		}

		@Override
		public void record() {
			System.out.println("call recording");
		}

		
}


public class Interface_Anather_Example {

	public static void main(String[] args) {
		//Phone sp=new Phone();
		//sp.Sms();
		//sp.voicecall();
		SmartPhone sm=new SmartPhone(); //object is great
		sm.click(); //calling method
		sm.play();
		sm.pause();
		sm.record();
		sm.stop();
		
	}

}



                     INTERFACE AND ABSREACTION METHOD:
                     
                     
    interface test{                      //Abstraction class test{
	                                          //abstraction void method1();
	void method1();                            //abstraction void method2();
	void method2();
}
class testInterface implements test{         //class tstabstraction extends test{
	

	@Override
	public void method1() {                 // public void metyhod1(){
		
System.out.println("method 1");		          //   System.out.println("method 1");
	}
                                                      //}
	@Override
	public void method2() {                        //public void method2(){
		System.out.println("method 2");		       //System.out.println("method 2");
                                                  //} }
	}
}
public class Interface_program {           ///public class Abstraction_program{

	public static void main(String[] args) {   //p s v m(string[]args){
testInterface tI=new testInterface();        // testabstraction  ta=new testabstrction();
		tI.method1();                       // ta.method1();
		tI.method2();                      // ta.method2();
	}
      
}
            /*difference between Abstraction and interface*/ 
            
            
            
            
            
            
            
            POLYMORPHISM EXAMPLE PROGRAM  METHODOVERLOADING:
            
            
 class parentclass{
	  public void display() {//with out paramitter
		  System.out.println("Hello karthi");
	  }      //Same name differend paramiter is method overloading
  }
  class childclass extends parentclass {
	  public void display(String name) { //with paramiter
		  System.out.println(" Hii sumathi"+name);
 
	  }
  }
public class Method_overloading_Polymorphsam {

	public static void main(String[] args) {
childclass cd =new childclass();
 cd.display(); //without argumends
cd.display("GK");//with argumends
	}

}
// runtime polymorphsam 



                        MULTIBLE INHERITANCE:
                        
                        
  class Emplayee{  
	 int salary=1000;  // one class a 
 }
 class Devalaper extends Emplayee{
	 int bonas=500;     //Anather class b extene class a use the proberties
 }
 class JavaDevalaper extends Devalaper{
	 int extrabonas=700;  // class c extends b class use the proberties of A and b
 }


public class Multilevel_inheritance {

	public static void main(String[] args) {
		JavaDevalaper  jd=new JavaDevalaper(); //object great c class
		System.out.println(jd.bonas);     //use the proberty of class b
		System.out.println(jd.salary);    //use the proberty of class A

		System.out.println(jd.salary);     //use the proberty of class c


	}

}
////Extends the class and use the parent class proberty.
//outpur A class 1000 and b class 500 and c class 700.




                         polymorphsm example program;
                         
                         
                         
                         class A{
	 public void display() {
		 System.out.println("Hello karthik");//method override  class b
	 }
 }
 class b {
	 public void display() {  // override 
	System.out.println("Hello sumathi");       // class b extends a{
	                                               //run output =hellon karthik because inherite
	                                                     // the method 
	 }
 }
public class Polymorphsam {

	public static void main(String[] args) {
     b li=new b();
 li.display();
	}

}// output : hii sumathi
 // compile time polymorphsim because the diside  the method run in compile time
 
 
 
                          
